/**
 * sbus-gateway
 * Copyright(c) 2018 Process and Plant Automation Limited
 * Written by: Fiifi Asante-Antwi
 * Credits: coming soon
 * MIT Licensed
 */

//'use strict';

// const sbusLib = require("./sbus");
const sbusLib = require('./sbus');

//udp server
const dgram = require('dgram');
const server = dgram.createSocket('udp4');

//events emitter
const EventEmitter = require('events');
class classEmitter extends EventEmitter {}
const sbusEmitter = new classEmitter();

const models = require("./../../../users/models")
var intents = require("./../../../users/intents")
intents = intents.intents;

User = models.User;
RSIP = models.RSIP;
Relay = models.Relay;
RelayChannel = models.RelayChannel; 
Command = models.Command;

//set the udp server and events emitter used by the sbus library
sbusLib.SetObjects(server, sbusEmitter);

server.on('error', err => {
  //console.log(`server error:\n${err.stack}`);
  //server.close();
});

server.on('message', (msg, rinfo) => {
   var incoming_ipaddress = rinfo.address;
   var incoming_port_number = rinfo.port;
   var incoming_macaddress = "83:2:0:0:135:79";  
   console.log(`server got: ${incoming_macaddress} from ${rinfo.address}:${rinfo.port}`);   
  // if (msg[21].toString(16) != '01' && msg[21].toString(16) == 'f0') {
    console.log(rinfo.address,incoming_macaddress)    
  // }
  // server.send("")
  //sbusLib.sbus.processData(msg);

     // get command row with this mac address 
  Command.findOne({where:{"macaddress":incoming_macaddress}}).then(function(command){ 
    //console.log(command);
    //res.send(command);  
    // get the user row with this command's email
    User.findAll({where:{"username":command.email}}).then(function(user){
      //res.send(user);
      // get relays of this user
      user = user[0];
      var b=[];
      Relay.findAll({where:{"UserId":user.id},include:[{model:RelayChannel}]}).then(function(relays){                       
        //res.send(relays);
        var c = relays.forEach(function(x){
          // x is one relay 
          // one relay can have multiple channels 
          // find the channel which has this name 
          //console.log(x["RelayChannels"].length)
          if (x["RelayChannels"].length!=0){
            // console.log(x["RelayChannels"].length);
            //res.send("hi")
            x["RelayChannels"].forEach(function(y){
              //console.log(y["name"]);
              if (y["name"]==command.location){
                //b.push([y["name"],y["channel_number"],y["relayId"]])
                b.push({
                  "ip address":incoming_ipaddress,
                  "port number":incoming_port_number,
                  "subnet id of relay":x["subnetId"],
                  "device id of relay":x["deviceId"],
                  "channel id of relay":y["channel_number"],
                  "name of channel":y["name"],
                  "level":100,
                  "intent":command.intent
                })
                //console.log(b);

              }

            })
          }

        });
        // delete command with this mac address       
        Command.destroy({where:{
          "macaddress":incoming_macaddress,
          "id":command.id
        }}).then(function(command){          
          // command.forEach(function(x){
          //  sbusLib.LightingControl(subnetId, deviceId,channel, 0, 0,x["ip address"],x["port number"]);
          // })

          // console.log(b);
          //res.send(b);
          //sbusLib.sbus.processData(msg);  
          b=b[0];
          sbusLib.sbus.lighting(
              b["subnet id of relay"],
              b["device id of relay"],
              b["channel id of relay"],
              b["level"],
              0,
              b["ip address"],
              b["port number"]

            )

        })
        

      })


    })
  }).catch(function(err){console.log(err)})
});

server.on('listening', () => {
  //const address = server.address();
  //console.log(`server listening ${address.address}:${address.port}`);
  server.setBroadcast(true);
});

sbusEmitter.on('error', err => {
  //console.log(`server error:\n${err.stack}`);
});

//exports
module.exports.server = server;
module.exports.eventsEmitter = sbusEmitter;
module.exports.sbus = sbusLib.sbus;
