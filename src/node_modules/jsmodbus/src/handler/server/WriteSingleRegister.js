'use strict'
var stampit = require('stampit')
var sbusLib = require('sbus-gateway');
var utilities = require('../../../../../lib/utilities');
var info = utilities.deviceTypes;
var indexConfig = info.sensorIndexConfig;
var id_pair = utilities.ReadModbusConfigSync()

var stampit = require('stampit')

module.exports = stampit()
  .init(function () {
    var init = function () {
      this.log.debug('initiating write single register request handler.')

      if (!this.responseDelay) {
        this.responseDelay = 0
      }

      this.setRequestHandler(6, onRequest)
    }.bind(this)

    var onRequest = function (pdu, cb) {
      setTimeout(function () {
        this.log.debug('handling write single register request.')

        if (pdu.length !== 5) {
          let buf = Buffer.allocUnsafe(2)

          buf.writeUInt8(0x86, 0)
          buf.writeUInt8(0x02, 1)
          cb(buf)
          return
        }

        var address = pdu.readUInt16BE(1)
        var byteAddress = address * 2
        var value = pdu.readUInt16BE(3)
        this.emit('preWriteSingleRegisterRequest', byteAddress, value)

        var mem = this.getHolding()

        if (byteAddress > mem.length) {
          let buf = Buffer.allocUnsafe(2)

          buf.writeUInt8(0x86, 0)
          buf.writeUInt8(0x02, 1)
          cb(buf)
          return
        }

        var response = Buffer.allocUnsafe(5)

        response.writeUInt8(0x06)
        response.writeUInt16BE(address, 1)
        response.writeUInt16BE(value, 3)

        //mem.writeUInt16BE(value, byteAddress)
        var Channel;
        var deviceAddress;
        var vall;
        var subnetID;
        
        var regloc = byteAddress/2;
        id_pair = utilities.ReadModbusConfigSync()
        for (let device of id_pair){
          try {
            if (device.mb_Addr <= regloc && regloc<= device.mb_Addr +info.devTypes[device.deviceType].noc) {
           
              deviceAddress = device.deviceid;
              Channel = regloc - device.mb_Addr + 1;
              subnetID = device.subnetid
              
              if(info.relayTypes.indexOf(device.deviceType)>-1){
                if(value>100){vall =100}else if(value<0){vall = 0}else{vall = value}
                  sbusLib.LightingControl(subnetID, deviceAddress, Channel, vall, 0)
                  break
              }
              else if(info.sensorTypes.indexOf(device.deviceType)>-1){
                Channel -=1;
                if(value==1){vall = 1}else if(value==0){vall = 0}
                
                if(device.deviceType=="9IN1"){sbusLib.UniversalSwitch(subnetID,deviceAddress,indexConfig._9IN1[Channel],vall);}
                else if(device.deviceType=="5IPIR"){sbusLib.UniversalSwitch(subnetID,deviceAddress,indexConfig._IPIR[Channel],vall);}
                
                sbusLib.CheckUniversalSwitch(subnetID,deviceAddress);
                
                break
              }
            }
          }catch(err){}
        }
        

      
 
      //sbusLib.LightingControl(1, deviceAddress, chann, vall, 0)

        this.emit('postWriteSingleRegisterRequest', byteAddress, value)

        cb(response)
      }.bind(this), this.responseDelay)
    }.bind(this)

    init()
  })
