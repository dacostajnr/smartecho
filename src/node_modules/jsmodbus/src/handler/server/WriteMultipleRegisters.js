'use strict'
var stampit = require('stampit')
var sbusLib = require('sbus-gateway');

var utilities = require('../../../../../lib/utilities');
var info = utilities.deviceTypes;
var id_pair = utilities.ReadModbusConfigSync()
module.exports = stampit()
  .init(function () {
    var init = function () {
      this.log.debug('initiating write multiple registers request handler.')

      if (!this.responseDelay) {
        this.responseDelay = 0;
      }

      this.setRequestHandler(16, onRequest)
    }.bind(this);

    var onRequest = function (pdu, cb) {
      setTimeout(function () {
        this.log.debug('handling write multiple registers request.')

        if (pdu.length < 3) {
          let buf = Buffer.allocUnsafe(2)

          buf.writeUInt8(0x90, 0)
          buf.writeUInt8(0x02, 1)
          cb(buf)
          return
        }

        var start = pdu.readUInt16BE(1)
        var byteStart = start * 2
        var quantity = pdu.readUInt16BE(3)
        var byteCount = pdu.readUInt8(5)

        if (quantity > 0x007b) {
          let buf = Buffer.allocUnsafe(2)

          buf.writeUInt8(0x90, 0)
          buf.writeUInt8(0x03, 1)
          cb(buf)
          return
        }

        this.emit('preWriteMultipleRegistersRequest', byteStart, quantity, byteCount)

        var mem = this.getHolding()

        if (byteStart > mem.length || byteStart + (quantity * 2) > mem.length) {
          var buf = Buffer.allocUnsafe(2)

          buf.writeUInt8(0x90, 0)
          buf.writeUInt8(0x02, 1)
          cb(buf)
          return
        }

        var response = Buffer.allocUnsafe(5)
        response.writeUInt8(0x10, 0)
        response.writeUInt16BE(start, 1)
        response.writeUInt16BE(quantity, 3)
        
        var vall;
        var Channel;
        var deviceID;
  
        var Value = pdu.readUInt16BE(6);
        var regloc = byteStart/2;
        var subnetID;
        var indexConfig = info.sensorIndexConfig;
        id_pair = utilities.ReadModbusConfigSync()
        for (let device of id_pair){
          try {
            if (device.mb_Addr <=regloc && regloc<= device.mb_Addr + info.devTypes[device.deviceType].noc) {
              subnetID = device.subnetid;
              deviceID = device.deviceid;
              Channel = regloc - device.mb_Addr + 1;

              if(info.relayTypes.indexOf(device.deviceType)>-1){
                if(Value>100){vall=100}else if(Value<0){vall = 0}else{vall = Value}
                sbusLib.LightingControl(subnetID, deviceID, Channel, vall, 0)
                break
              }
              else if(info.sensorTypes.indexOf(device.deviceType)>-1){
                Channel -= 1; 
                if(Value==1){vall = 1}else if(Value==0){vall = 0}

                if(device.deviceType=="9IN1"){sbusLib.UniversalSwitch(subnetID,deviceID,indexConfig._9IN1[Channel],vall);}
                else if(device.deviceType=="5IPIR"){sbusLib.UniversalSwitch(subnetID,deviceID,indexConfig._IPIR[Channel],vall);}

                sbusLib.CheckUniversalSwitch(subnetID,deviceID);
                break
              }
             
            }
                }catch(err){}
                
              }


        // pdu.copy(mem, byteStart, 6, 6 + byteCount)

        this.emit('postWriteMultipleRegistersRequest', byteStart, quantity, byteCount)

        cb(response)
      }.bind(this), this.responseDelay)
    }.bind(this)

    init()
  })
